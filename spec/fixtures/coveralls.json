{
  "service_name": "travis-pro",
  "git": {
    "head": {
      "id": "79d147e32deb3e3909623e15718b4323423423\n",
      "committer_email": "---@--.com\n",
      "committer_name": "--\n",
      "author_email": "----@--.com\n",
      "author_name": "--\n",
      "message": "do a thing\n"
    },
    "remotes": [

    ],
    "branch": "coveralls\n"
  },
  "source_files": [
    {
      "name": "render-server/.mocha/setup/index.js",
      "source": "require('babel-register')\nrequire('source-map-support').install()\nrequire('./setup.js').default()\n",
      "coverage": [
        1,
        1,
        1
      ],
      "source_digest": "b0c157933c52816f477997e752475bf9"
    },
    {
      "name": "render-server/.mocha/setup/setup.js",
      "source": "import jsdom from 'jsdom'\nimport chai from 'chai'\nimport chaiAsPromised from 'chai-as-promised'\nimport {shallow, mount, render} from 'enzyme'\n\nexport default function setup() {\n  createDOM()\n  configureChai()\n  configureEnzyme()\n  configurePropValidationErrors()\n}\n\nfunction createDOM() {\n  global.document = jsdom.jsdom('')\n  global.window = global.document.defaultView\n  global.navigator = {\n    userAgent: 'node.js'\n  }\n\n  Object.keys(global.document.defaultView).forEach((name) => {\n    if (typeof global[name] === 'undefined') {\n      global[name] = global.document.defaultView[name]\n    }\n  })\n}\n\nfunction configureChai() {\n  chai.use(chaiAsPromised)\n  global.expect = chai.expect\n}\n\nfunction configureEnzyme() {\n  global.shallow = shallow\n  global.mount = mount\n  global.render = render\n}\n\nfunction configurePropValidationErrors() {\n  const error = console.error\n  console.error = function(warning, ...args) {\n    if (/(Invalid prop|Failed prop type)/.test(warning)) {\n      throw new Error(warning)\n    }\n    error.apply(console, [warning, ...args])\n  }\n}\n",
      "coverage": [
        1,
        1,
        1,
        1,
        null,
        null,
        1,
        1,
        1,
        1,
        null,
        null,
        null,
        1,
        1,
        1,
        null,
        null,
        null,
        1,
        82,
        62,
        null,
        null,
        null,
        null,
        null,
        1,
        1,
        null,
        null,
        null,
        1,
        1,
        1,
        null,
        null,
        null,
        1,
        2,
        2,
        0,
        null,
        2,
        null,
        null
      ],
      "branches": [
        21,
        0,
        0,
        62,
        21,
        0,
        1,
        20,
        41,
        1,
        0,
        0,
        41,
        1,
        1,
        2
      ],
      "source_digest": "110b740598ed9a97f5f4de1c4b270524"
    },
    {
      "name": "render-server/src/js/app/directory/file.js",
      "source": "import {PropTypes} from 'react'\n\nconst Shape = {\n  id: PropTypes.number, \n}\n\nexport default Shape\n",
      "coverage": [
        1,
        null,
        1,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "source_digest": "dc89bfb1c1ca883371be3cdd4c5d0aed"
    },
    {
      "source": "\nRSpec.describe CoverallsMulti do\n  before do\n    @runner = CoverallsMulti::Runner.new\n  end\n\n  it 'has a version number' do\n    expect(CoverallsMulti::VERSION).not_to be nil\n  end\n\n  it 'initializes without throwing' do\n    expect { CoverallsMulti::Runner.new }.not_to raise_error\n  end\n\n  it 'loads the files' do\n    expect(@runner.files).to be_a(Hash)\n  end\n\n  # TODO: make file loading more configurable & fault-tolerant\n  # it 'throws an error if a file is not found' do\n  # end\n\n  # it 'uses a default coverage directory if none is specified' do\n  # end\n\n  # it 'iterates over a coverage directory and checks for known filetypes' do\n  # end\n\n  # it 'checks for a coveralls.yml file' do\n  # end\n\n  # it 'reads file paths from yaml config' do\n  # end\n\n  # it 'has a wizard to help with setup' do\n  # end\n\n  # TODO: allow coveralls-multi to run your tests for you too\n  # it 'can take a set of test commands to run' do\n  # end\n\n  it 'formats Simplecov results files' do\n    results = CoverallsMulti::Formatter::SimpleCov.run(@runner.files[:ruby])\n    # TODO: have this compare against an existing output file\n    expect(results).to be_a(Array)\n  end\n\n  # TODO: convert lcov results using the coveralls-lcov gem in the tool itself\n  # it 'converts lcov results files' do\n  # end\n\n  # TODO: what do elixir coverage files look like?\n  # it 'formats elixir coverage files' do\n  # end\n\n  it 'merges two or more formatted files' do\n    results = CoverallsMulti::Merger.merge(@runner.files)\n    # TODO: should also compare itself with an existing output file\n    expect(results).to be_a(Hash)\n  end\n\n  # it 'checks for source digests and adds them if needed' do\n  #   pending\n  # end\n\n  # TODO: add some validators so nobody has to spend their time poring over json files figuring out what went wrong\n  # it 'validates the merged file to ensure it is valid JSON' do\n  # end\n\n  # it 'validates the merged file to ensure it has all the correct coveralls keys' do\n  # end\n\n  # TODO: use coveralls.yml instead of env vars\n  it 'adds travis keys' do\n    results = CoverallsMulti::Merger.merge(@runner.files)\n\n    expect(results['service_name']).to eq('travis-pro')\n    expect(results['repo_token']).to be_a(String)\n  end\n\n  it 'calls Coveralls::API.post_json' do\n    allow(Coveralls::API).to receive(:post_json).and_return('pushed!')\n\n    expect(@runner.start).to eq('pushed!')\n  end\n\n  # TODO: more debugging tools to make it easier to add other formatters in the future\n  # it 'takes a flag to run without pushing to Coveralls' do\n  # end\n\n  # it 'takes a flag to write output to a file' do\n  # end\nend\n",
      "name": "spec/multi_spec.rb",
      "coverage": [
        1,
        1,
        1,
        null,
        null,
        1,
        2,
        null,
        null,
        1,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        1,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        1,
        null,
        null,
        1,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        1,
        null,
        null,
        1,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "source_digest": "8c4b178d47072b488f21c3f12d7e68bd"
    }
  ],
  "repo_token": ""
}